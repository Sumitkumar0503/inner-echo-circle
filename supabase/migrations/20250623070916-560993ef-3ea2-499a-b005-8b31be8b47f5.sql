
-- Create user profiles table
CREATE TABLE public.profiles (
  id uuid NOT NULL REFERENCES auth.users ON DELETE CASCADE,
  username text UNIQUE,
  avatar_emoji text DEFAULT '✨',
  bio text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  PRIMARY KEY (id)
);

-- Create posts table for timeline
CREATE TABLE public.posts (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  author_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  content text NOT NULL,
  type text NOT NULL DEFAULT 'thoughts',
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Create events table for hangouts
CREATE TABLE public.events (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  creator_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  title text NOT NULL,
  description text,
  start_time timestamp with time zone NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Create messages table for inbox
CREATE TABLE public.messages (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  sender_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  recipient_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  content text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  read_at timestamp with time zone
);

-- Create invite tokens table
CREATE TABLE public.invite_tokens (
  token uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  issued_by uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
  redeemed_by uuid REFERENCES public.profiles(id) ON DELETE SET NULL,
  expires_at timestamp with time zone NOT NULL,
  redeemed_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Create prompts table with sample data
CREATE TABLE public.prompts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  prompt_text text NOT NULL,
  emoji text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Insert sample prompts
INSERT INTO public.prompts (prompt_text, emoji) VALUES
('What made you smile today?', '😊'),
('Share a small victory from this week', '🎉'),
('What are you grateful for right now?', '🙏'),
('Describe your perfect day', '☀️'),
('What''s something new you learned recently?', '📚'),
('Share a photo that brings back good memories', '📸'),
('What''s your favorite way to unwind?', '🧘'),
('Tell us about a book or movie that changed your perspective', '🎬'),
('What''s a goal you''re working towards?', '🎯'),
('Share something that made you laugh recently', '😂'),
('What''s your favorite season and why?', '🍂'),
('Describe a place that feels like home to you', '🏠'),
('What''s a skill you''d love to learn?', '🎨'),
('Share a quote that resonates with you', '💭'),
('What''s your favorite childhood memory?', '🧸'),
('Tell us about someone who inspires you', '⭐'),
('What''s something you''re looking forward to?', '🌟'),
('Share a random act of kindness you witnessed', '💝'),
('What''s your favorite way to spend a weekend?', '🌈'),
('Describe your ideal vacation', '✈️'),
('What''s something that always cheers you up?', '🌻'),
('Share a hobby that brings you joy', '🎵'),
('What''s the best advice you''ve ever received?', '💡'),
('Tell us about a tradition you love', '🎊'),
('What''s something you''re proud of accomplishing?', '🏆'),
('Share a moment when you felt truly connected to others', '🤝'),
('What''s your favorite comfort food?', '🍕'),
('Describe a perfect evening with friends', '🌙'),
('What''s something that makes you feel peaceful?', '🕊️'),
('Share what you''re most excited about this month', '🚀');

-- Enable Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invite_tokens ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.prompts ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for profiles
CREATE POLICY "Users can view all profiles" ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can update own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);
CREATE POLICY "Users can insert own profile" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

-- Create RLS policies for posts
CREATE POLICY "Users can view all posts" ON public.posts FOR SELECT USING (true);
CREATE POLICY "Users can create posts" ON public.posts FOR INSERT WITH CHECK (auth.uid() = author_id);
CREATE POLICY "Users can update own posts" ON public.posts FOR UPDATE USING (auth.uid() = author_id);
CREATE POLICY "Users can delete own posts" ON public.posts FOR DELETE USING (auth.uid() = author_id);

-- Create RLS policies for events
CREATE POLICY "Users can view all events" ON public.events FOR SELECT USING (true);
CREATE POLICY "Users can create events" ON public.events FOR INSERT WITH CHECK (auth.uid() = creator_id);
CREATE POLICY "Users can update own events" ON public.events FOR UPDATE USING (auth.uid() = creator_id);
CREATE POLICY "Users can delete own events" ON public.events FOR DELETE USING (auth.uid() = creator_id);

-- Create RLS policies for messages
CREATE POLICY "Users can view their messages" ON public.messages FOR SELECT USING (auth.uid() = sender_id OR auth.uid() = recipient_id);
CREATE POLICY "Users can send messages" ON public.messages FOR INSERT WITH CHECK (auth.uid() = sender_id);
CREATE POLICY "Users can update their received messages" ON public.messages FOR UPDATE USING (auth.uid() = recipient_id);

-- Create RLS policies for invite tokens
CREATE POLICY "Users can view invite tokens they created" ON public.invite_tokens FOR SELECT USING (auth.uid() = issued_by);
CREATE POLICY "Users can create invite tokens" ON public.invite_tokens FOR INSERT WITH CHECK (auth.uid() = issued_by);
CREATE POLICY "Anyone can view unredeemed tokens for redemption" ON public.invite_tokens FOR SELECT USING (redeemed_at IS NULL);

-- Create RLS policies for prompts
CREATE POLICY "Anyone can view prompts" ON public.prompts FOR SELECT USING (true);

-- Create function to handle new user profile creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = ''
AS $$
BEGIN
  INSERT INTO public.profiles (id, username, avatar_emoji, bio)
  VALUES (
    new.id,
    new.raw_user_meta_data ->> 'username',
    COALESCE(new.raw_user_meta_data ->> 'avatar_emoji', '✨'),
    new.raw_user_meta_data ->> 'bio'
  );
  RETURN new;
END;
$$;

-- Create trigger to automatically create profile on user signup
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
